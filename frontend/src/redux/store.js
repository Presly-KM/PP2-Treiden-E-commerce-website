import { configureStore } from '@reduxjs/toolkit'; // On importe configureStore depuis Redux Toolkit afin de permettre la création du store et ainsi pouvoir gérer l'état de l'application
import authReducer from './slices/authSlice'; // On importe le reducer authReducer depuis le fichier authSlice.js. Ce reducer est utilisé pour gérer l'état de l'authentification de l'utilisateur dans l'application. Il contient les actions et les reducers nécessaires pour gérer la connexion, la déconnexion et l'état de l'utilisateur.
import productReducer from './slices/productsSlice'; // On importe le reducer productReducer depuis le fichier productSlice.js. Ce reducer est utilisé pour gérer l'état des produits dans l'application. Il contient les actions et les reducers nécessaires pour gérer la liste des produits, les détails d'un produit spécifique, etc.
import cartReducer from './slices/cartSlice'; // On importe le reducer cartReducer depuis le fichier cartSlice.js. Ce reducer est utilisé pour gérer l'état du panier de l'utilisateur dans l'application. Il contient les actions et les reducers nécessaires pour ajouter, supprimer et mettre à jour les produits dans le panier.
import checkoutReducer from './slices/checkoutSlice'; // On importe le reducer checkoutReducer depuis le fichier checkoutSlice.js. Ce reducer est utilisé pour gérer l'état du processus de paiement dans l'application. Il contient les actions et les reducers nécessaires pour gérer les informations de paiement, la validation des informations de livraison, etc.
import orderReducer from './slices/orderSlice'; // On importe le reducer orderReducer depuis le fichier orderSlice.js. Ce reducer est utilisé pour gérer l'état des commandes dans l'application. Il contient les actions et les reducers nécessaires pour créer, récupérer et gérer les commandes passées par l'utilisateur.
import adminReducer from './slices/adminSlice'; // On importe le reducer adminReducer depuis le fichier adminSlice.js. Ce reducer est utilisé pour gérer l'état de l'administration dans l'application. Il contient les actions et les reducers nécessaires pour gérer les utilisateurs, les produits, les commandes, etc. dans le panneau d'administration.
import adminProductReducer from './slices/adminProductSlice'; // On importe le reducer adminProductReducer depuis le fichier adminProductSlice.js. Ce reducer est utilisé pour gérer l'état des produits dans le panneau d'administration. Il contient les actions et les reducers nécessaires pour ajouter, modifier et supprimer des produits dans l'administration.
import adminOrderReducer from './slices/adminOrderSlice'; // On importe le reducer adminOrderReducer depuis le fichier adminOrderSlice.js. Ce reducer est utilisé pour gérer l'état des commandes dans le panneau d'administration. Il contient les actions et les reducers nécessaires pour gérer les commandes passées par les utilisateurs dans l'administration.
const store = configureStore({  // On déclare une constante store qui va contenir le store de l'application. A l'intérieur de cette constante, on lui passe l'objet reducer qui contiendront les différents fonctions de chaque focntionnalité de l'application comme par exemple "user reducer" pour la gestion de l'utilisateur ou encore "cart reducer" pour la gestion du panier.
    reducer: {                // On initialise le store avec un objet vide pour l'instant, car nous n'avons pas encore de reducers définis.
        auth: authReducer, // On ajoute le reducer authReducer au store sous la clé "auth". Cela permet de gérer l'état de l'authentification de l'utilisateur dans l'application.
        products: productReducer, // On ajoute le reducer productReducer au store sous la clé "products". Cela permet de gérer l'état des produits dans l'application.
        cart: cartReducer, // On ajoute le reducer cartReducer au store sous la clé "cart". Cela permet de gérer l'état du panier de l'utilisateur dans l'application.
        checkout: checkoutReducer, // On ajoute le reducer checkoutReducer au store sous la clé "checkout". Cela permet de gérer l'état du processus de paiement dans l'application.
        orders: orderReducer, // On ajoute le reducer orderReducer au store sous la clé "orders". Cela permet de gérer l'état des commandes passées par l'utilisateur dans l'application.
        admin: adminReducer,  // On ajoute le reducer adminReducer au store sous la clé "admin". Cela permet de gérer l'état de l'administration dans l'application.
        adminProducts: adminProductReducer, // On ajoute le reducer adminProductReducer au store sous la clé "adminProducts". Cela permet de gérer l'état des produits dans le panneau d'administration.
        adminOrders: adminOrderReducer, // On ajoute le reducer adminOrderReducer au store sous la clé "adminOrders". Cela permet de gérer l'état des commandes dans le panneau d'administration.
    }, 
});

export default store;         // On exporte le store pour qu'il puisse être utilisé dans d'autres parties de l'application, comme dans le fichier index.js pour être intégré à l'application React.

